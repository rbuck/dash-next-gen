DROP SCHEMA cloud CASCADE;
CREATE SCHEMA cloud;
USE cloud;

-- cleanup

DROP TRIGGER object_update IF EXISTS;
DROP INDEX ix_object_deleted_name IF EXISTS;
DROP INDEX idx_user_email IF EXISTS;
DROP INDEX idx_container_name IF EXISTS;
DROP INDEX idx_container_account_id IF EXISTS;
DROP INDEX idx_container_status_type IF EXISTS;

DROP TABLE CASCADE object IF EXISTS;
DROP TABLE CASCADE container IF EXISTS;
DROP TABLE CASCADE account IF EXISTS;

-- create tables

CREATE SEQUENCE seq_account;

CREATE TABLE account (
  id                     BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (seq_account),
  urn                    STRING, -- unique

  name                   STRING,
  metadata               TEXT      DEFAULT '',
  created_at             TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  modified_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at             TIMESTAMP DEFAULT NULL,

  description            STRING    DEFAULT '',

  permissible_containers INTEGER   DEFAULT 100
);

CREATE UNIQUE INDEX idx_account_urn ON account (urn);
CREATE INDEX idx_account_name ON account (name);

CREATE TABLE account_stat (
  account_id      BIGINT REFERENCES account (id), -- foreign
  container_count INTEGER DEFAULT 0,
  object_count    INTEGER DEFAULT 0,
  bytes_used      INTEGER DEFAULT 0
);

CREATE UNIQUE INDEX idx_account_stat_account_id ON account_stat (account_id);

CREATE SEQUENCE seq_container;

CREATE TABLE container (
  id          BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (seq_container),
  account_id  BIGINT REFERENCES account (id), -- foreign
  rand_id     DOUBLE    DEFAULT RAND(),

  name        STRING, -- globally unique (contention)
  metadata    TEXT      DEFAULT '',
  created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  modified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at  TIMESTAMP DEFAULT NULL
);

CREATE UNIQUE INDEX idx_container_name ON container (name);
CREATE INDEX idx_container_account_id ON container (account_id);
CREATE INDEX ix_container_random_id ON container (rand_id);

CREATE TABLE container_stat (
  container_id BIGINT REFERENCES container (id), -- foreign
  object_count BIGINT DEFAULT 0,
  bytes_used   BIGINT DEFAULT 0
);

CREATE UNIQUE INDEX idx_container_stat_container_id ON container_stat (container_id);

CREATE SEQUENCE seq_object;

CREATE TABLE object (
  id           BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY (seq_object),
  container_id BIGINT REFERENCES container (id), -- foreign
  rand_id      DOUBLE    DEFAULT RAND(),

  name         STRING, -- unique per container
  metadata     TEXT      DEFAULT '',
  created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  modified_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at   TIMESTAMP DEFAULT NULL,

  size         BIGINT,

  content_type STRING,
  etag         STRING
);

-- create indexes

CREATE INDEX ix_object_container_name ON object (container_id, name);
CREATE INDEX ix_object_random_id ON object (rand_id);

-- create stored procedures

SET DELIMITER @
CREATE TRIGGER trg_object_update FOR OBJECT BEFORE UPDATE
  AS
  THROW  'UPDATE not allowed; DELETE and INSERT';
END_TRIGGER;
@
SET DELIMITER ;

SET DELIMITER @
CREATE TRIGGER trg_account_insert FOR account AFTER INSERT
AS
    INSERT INTO account_stat (account_id) VALUES (NEW.id);
END_TRIGGER;
@
SET DELIMITER ;

SET DELIMITER @
CREATE TRIGGER trg_container_insert FOR container AFTER INSERT
AS
    INSERT INTO container_stat (container_id) VALUES (NEW.id);
    UPDATE account_stat SET
        container_count = container_count + 1
    WHERE account_id = NEW.account_id;
END_TRIGGER;
@
SET DELIMITER ;

SET DELIMITER @
CREATE TRIGGER trg_object_insert FOR object AFTER INSERT
AS
    UPDATE container_stat SET
        object_count = object_count + 1,
        bytes_used = bytes_used + NEW.size
    WHERE container_id = NEW.container_id;
END_TRIGGER;
@
SET DELIMITER ;

SET DELIMITER @
CREATE TRIGGER trg_container_delete FOR container BEFORE DELETE
AS
    INSERT INTO container_stat (container_id) VALUES (NEW.id);
    UPDATE account_stat SET
        container_count = container_count - 1
    WHERE account_id = NEW.account_id;
END_TRIGGER;
@
SET DELIMITER ;

SET DELIMITER @
CREATE TRIGGER trg_object_delete FOR object BEFORE DELETE
AS
    UPDATE container_stat SET
        object_count = object_count - 1,
        bytes_used = bytes_used - OLD.size
    WHERE container_id = NEW.container_id;
END_TRIGGER;
@
SET DELIMITER ;
